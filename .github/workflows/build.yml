name: Build OBS Timestamp Plugin

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  windows:
    name: Windows Build
    runs-on: windows-latest
    env:
      OBS_VERSION: '32.0.1'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Download OBS Studio
        run: |
          $ErrorActionPreference = "Stop"
          $url = "https://github.com/obsproject/obs-studio/releases/download/${{ env.OBS_VERSION }}/OBS-Studio-${{ env.OBS_VERSION }}-Windows-x64.zip"
          Write-Host "Downloading OBS Studio ${{ env.OBS_VERSION }}..."
          Invoke-WebRequest -Uri $url -OutFile obs-studio.zip
          Write-Host "Extracting..."
          Expand-Archive -Path obs-studio.zip -DestinationPath obs-studio
          Write-Host "OBS Studio extracted to: $PWD\obs-studio"
          Get-ChildItem obs-studio

      - name: Download OBS Source Headers
        run: |
          $ErrorActionPreference = "Stop"
          $url = "https://github.com/obsproject/obs-studio/archive/refs/tags/${{ env.OBS_VERSION }}.zip"
          Write-Host "Downloading OBS Studio source headers..."
          Invoke-WebRequest -Uri $url -OutFile obs-source.zip
          Write-Host "Extracting source..."
          Expand-Archive -Path obs-source.zip -DestinationPath obs-source
          Write-Host "Creating include directory structure..."
          New-Item -ItemType Directory -Force -Path obs-studio\include\obs
          # Copy libobs headers
          Copy-Item -Path "obs-source\obs-studio-${{ env.OBS_VERSION }}\libobs\*.h" -Destination obs-studio\include\obs -Force
          Copy-Item -Path "obs-source\obs-studio-${{ env.OBS_VERSION }}\libobs\*.hpp" -Destination obs-studio\include\obs -Force
          # Copy util headers (required by obs.h)
          Copy-Item -Path "obs-source\obs-studio-${{ env.OBS_VERSION }}\libobs\util" -Destination obs-studio\include\obs -Recurse -Force
          # Copy other required subdirectories
          Copy-Item -Path "obs-source\obs-studio-${{ env.OBS_VERSION }}\libobs\graphics" -Destination obs-studio\include\obs -Recurse -Force
          Copy-Item -Path "obs-source\obs-studio-${{ env.OBS_VERSION }}\libobs\media-io" -Destination obs-studio\include\obs -Recurse -Force
          Copy-Item -Path "obs-source\obs-studio-${{ env.OBS_VERSION }}\libobs\callback" -Destination obs-studio\include\obs -Recurse -Force
          # Copy frontend API headers
          Copy-Item -Path "obs-source\obs-studio-${{ env.OBS_VERSION }}\frontend\api\*.h" -Destination obs-studio\include\obs -Force -ErrorAction SilentlyContinue

          # Create obsconfig.h from template
          Write-Host "Generating obsconfig.h..."
          @'
          #pragma once
          #define OBS_VERSION "32.0.1"
          #define OBS_DATA_PATH "../data"
          #define OBS_INSTALL_PREFIX ""
          #define OBS_PLUGIN_DESTINATION "obs-plugins/64bit"
          #define OBS_RELATIVE_PREFIX "../"
          #define OBS_UNIX_STRUCTURE 0
          '@ | Out-File -FilePath "obs-studio\include\obs\obsconfig.h" -Encoding ASCII
          Write-Host "Include directory created successfully"

      - name: Create Import Libraries
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Creating lib directory..."
          New-Item -ItemType Directory -Force -Path obs-studio\bin\64bit

          Write-Host "Checking for existing .lib files..."
          $existingLibs = Get-ChildItem obs-studio\bin\64bit\*.lib -ErrorAction SilentlyContinue
          if ($existingLibs) {
            Write-Host "Found existing .lib files:"
            $existingLibs | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Host "No .lib files found - attempting to create from DLLs..."

            # Find dumpbin and lib tools (part of Visual Studio)
            $vcToolsPath = (Get-ChildItem "C:\Program Files\Microsoft Visual Studio" -Recurse -Filter "dumpbin.exe" -ErrorAction SilentlyContinue | Select-Object -First 1).DirectoryName

            if ($vcToolsPath) {
              Write-Host "Found Visual Studio tools at: $vcToolsPath"
              $env:PATH = "$vcToolsPath;$env:PATH"

              # Try to create import libraries for obs.dll and obs-frontend-api.dll
              $dlls = @("obs.dll", "obs-frontend-api.dll")
              foreach ($dll in $dlls) {
                $dllPath = "obs-studio\bin\64bit\$dll"
                if (Test-Path $dllPath) {
                  Write-Host "Processing $dll..."
                  $baseName = [System.IO.Path]::GetFileNameWithoutExtension($dll)
                  $defFile = "obs-studio\bin\64bit\$baseName.def"
                  $libFile = "obs-studio\bin\64bit\$baseName.lib"

                  # Extract exports using dumpbin
                  & dumpbin /exports "$dllPath" | Out-File -FilePath "$baseName-exports.txt"

                  # Parse exports and create .def file
                  $exports = Get-Content "$baseName-exports.txt" | Select-String -Pattern "^\s+\d+\s+[0-9A-F]+\s+[0-9A-F]+\s+(\S+)"

                  if ($exports.Count -gt 0) {
                    "EXPORTS" | Out-File -FilePath "$defFile" -Encoding ASCII

                    foreach ($export in $exports) {
                      $functionName = $export.Matches.Groups[1].Value
                      if ($functionName -notmatch "^_" -and $functionName -notmatch "deleting") {
                        "    $functionName" | Out-File -FilePath "$defFile" -Append -Encoding ASCII
                      }
                    }

                    # Create .lib from .def
                    & lib /def:"$defFile" /out:"$libFile" /machine:x64

                    if (Test-Path $libFile) {
                      Write-Host "Created $libFile successfully"
                    } else {
                      Write-Host "Failed to create $libFile"
                    }
                  }
                }
              }
            } else {
              Write-Host "WARNING: Could not find Visual Studio tools"
              Write-Host "Build may fail if .lib files are not present"
            }
          }

          Write-Host "Library setup complete"

      - name: Configure
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}\obs-studio"

      - name: Build
        run: cmake --build build --config Release

      - name: Package
        run: |
          New-Item -ItemType Directory -Force -Path package\bin\64bit
          New-Item -ItemType Directory -Force -Path package\data
          Copy-Item build\Release\obs-timestamp-plugin.dll package\bin\64bit\
          Copy-Item -Path data\* -Destination package\data\ -Recurse

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: obs-timestamp-plugin-windows
          path: package/

  linux:
    name: Linux Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add OBS Studio PPA
        run: |
          sudo add-apt-repository ppa:obsproject/obs-studio
          sudo apt-get update

      - name: Install Dependencies
        run: |
          sudo apt-get install -y build-essential cmake libobs-dev obs-studio

      - name: Configure
        run: cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr

      - name: Build
        run: cmake --build build

      - name: Package
        run: |
          mkdir -p package/bin/64bit package/data
          cp build/libobs-timestamp-plugin.so package/bin/64bit/
          cp -r data/* package/data/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: obs-timestamp-plugin-linux
          path: package/

  macos:
    name: macOS Build
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          brew install cmake
          brew install --cask obs

      - name: Configure
        run: cmake -S . -B build -DCMAKE_PREFIX_PATH=/Applications/OBS.app/Contents/Resources

      - name: Build
        run: cmake --build build

      - name: Package
        run: |
          mkdir -p package/bin package/data
          cp build/libobs-timestamp-plugin.so package/bin/
          cp -r data/* package/data/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: obs-timestamp-plugin-macos
          path: package/
